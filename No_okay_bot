import requests
import re
import time
import json
import os
from datetime import datetime

# –í–°–¢–ê–í–¨–¢–ï –°–Æ–î–ê –í–ê–® –¢–û–ö–ï–ù –ë–û–¢–ê
BOT_TOKEN = "–í–ê–®_–¢–û–ö–ï–ù_–ë–û–¢–ê_–ó–î–ï–°–¨"

class SmartPhishingCheckerBot:
    def __init__(self, token):
        self.token = token
        self.base_url = f"https://api.telegram.org/bot{token}/"
        
        # –§–∞–π–ª—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ø–∏—Å–∫–æ–≤
        self.trusted_file = "trusted_domains.json"
        self.malicious_file = "malicious_domains.json"
        self.banks_file = "bank_domains.json"
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–∫–∏
        self.trusted_domains = self.load_list(self.trusted_file, self.get_default_trusted())
        self.malicious_domains = self.load_list(self.malicious_file, self.get_default_malicious())
        self.bank_domains = self.load_list(self.banks_file, self.get_default_banks())
        
        # URL –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–æ–≤
        self.phishing_feeds = [
            "https://openphish.com/feed.txt",
            "https://raw.githubusercontent.com/mitchellkrogza/Phishing.Database/master/phishing-domains-ACTIVE.txt"
        ]
        
        # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        self.last_update = time.time()
        
        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.last_messages = {}
        
    def load_list(self, filename, default_list):
        """–ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑ —Ñ–∞–π–ª–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º default"""
        try:
            if os.path.exists(filename):
                with open(filename, 'r', encoding='utf-8') as f:
                    return json.load(f)
        except:
            pass
        return default_list
    
    def save_list(self, filename, data):
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –≤ —Ñ–∞–π–ª"""
        try:
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
        except:
            pass
    
    def get_default_trusted(self):
        """–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –¥–æ–º–µ–Ω—ã"""
        return [
            'google.com', 'youtube.com', 'instagram.com', 'facebook.com',
            'twitter.com', 'tiktok.com', 'vk.com', 'reddit.com',
            'github.com', 'stackoverflow.com', 'wikipedia.org', 'medium.com',
            'netflix.com', 'spotify.com', 'amazon.com', 'microsoft.com',
            'apple.com', 'yahoo.com', 'mail.ru', 'yandex.ru'
        ]
    
    def get_default_malicious(self):
        """–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã–µ –¥–æ–º–µ–Ω—ã"""
        return [
            'iplogger.com', 'iplogger.org', 'grabify.link', '2no.co',
            'ipgraber.ru', 'blasze.com', 'ip-tracker.org', 'yip.su',
            'ip-grabber.com', 'ip-logger.com', 'ipgrab.org'
        ]
    
    def get_default_banks(self):
        """–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ –¥–æ–º–µ–Ω—ã –†–æ—Å—Å–∏–∏ –∏ –°–®–ê"""
        return [
            # –†–æ—Å—Å–∏–π—Å–∫–∏–µ –±–∞–Ω–∫–∏
            'sberbank.ru', 'vtb.ru', 'gazprombank.ru', 'alfabank.ru',
            'tinkoff.ru', 'otkritie.ru', 'raiffeisen.ru', 'promsvyazbank.ru',
            'rosselhozbank.ru', 'sovcombank.ru', 'mtsbank.ru', 'uralsibbank.ru',
            'rshb.ru', 'akbars.ru',
            
            # –ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–µ –±–∞–Ω–∫–∏
            'bankofamerica.com', 'chase.com', 'wellsfargo.com', 'citibank.com',
            'capitalone.com', 'usbank.com', 'tdbank.com', 'pnc.com',
            'ally.com', 'discover.com'
        ]
    
    def update_lists_from_feeds(self):
        """–û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–∫–∏ –∏–∑ –æ–Ω–ª–∞–π–Ω-–∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
        if time.time() - self.last_update < 3600:  # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑ –≤ —á–∞—Å
            return
        
        print("üîÑ –û–±–Ω–æ–≤–ª—è—é —Å–ø–∏—Å–∫–∏ –∏–∑ –æ–Ω–ª–∞–π–Ω-–∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤...")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤
        for feed_url in self.phishing_feeds:
            try:
                response = requests.get(feed_url, timeout=10)
                if response.status_code == 200:
                    lines = response.text.split('\n')
                    for line in lines:
                        domain = line.strip()
                        if domain and '.' in domain and domain not in self.malicious_domains:
                            self.malicious_domains.append(domain)
            except:
                continue
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏
        self.save_list(self.malicious_file, self.malicious_domains)
        
        self.last_update = time.time()
        print("‚úÖ –°–ø–∏—Å–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
    
    def get_updates(self, offset=None):
        """–ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        url = self.base_url + "getUpdates"
        params = {'timeout': 30, 'offset': offset}
        try:
            response = requests.get(url, params=params, timeout=35)
            return response.json()
        except:
            return {'result': []}
    
    def send_message(self, chat_id, text):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ —É–∂–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_key = f"{chat_id}_{hash(text)}"
        if message_key in self.last_messages:
            if time.time() - self.last_messages[message_key] < 10:  # 10 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                return None
        
        url = self.base_url + "sendMessage"
        params = {'chat_id': chat_id, 'text': text}
        try:
            response = requests.post(url, params=params, timeout=10)
            self.last_messages[message_key] = time.time()
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
            for key in list(self.last_messages.keys()):
                if time.time() - self.last_messages[key] > 60:  # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—à–µ 60 —Å–µ–∫—É–Ω–¥
                    del self.last_messages[key]
            return response.json()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
            return None
    
    def extract_links(self, text):
        """–ò—â–µ–º —Å—Å—ã–ª–∫–∏ –≤ —Ç–µ–∫—Å—Ç–µ"""
        url_pattern = r'https?://[^\s<>"]+|www\.[^\s<>"]+'
        return re.findall(url_pattern, text)
    
    def get_domain_from_url(self, url):
        """–ò–∑–≤–ª–µ–∫–∞–µ–º –¥–æ–º–µ–Ω –∏–∑ URL"""
        try:
            if '://' in url:
                url = url.split('://')[1]
            if '/' in url:
                url = url.split('/')[0]
            if ':' in url:
                url = url.split(':')[0]
            return url.lower()
        except:
            return url
    
    def is_bank_domain(self, domain):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–æ–º–µ–Ω –±–∞–Ω–∫–æ–≤—Å–∫–∏–º"""
        return any(bank_domain in domain for bank_domain in self.bank_domains)
    
    def is_trusted_domain(self, domain):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã–π –ª–∏ –¥–æ–º–µ–Ω"""
        return any(trusted_domain in domain for trusted_domain in self.trusted_domains)
    
    def is_malicious_domain(self, domain):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã–π –ª–∏ –¥–æ–º–µ–Ω"""
        return any(malicious_domain in domain for malicious_domain in self.malicious_domains)
    
    def analyze_domain_similarity(self, domain, trusted_domain):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ö–æ–∂–µ—Å—Ç—å –¥–æ–º–µ–Ω–æ–≤ –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —Ñ–∏—à–∏–Ω–≥–∞"""
        if domain == trusted_domain:
            return False
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–æ–≤
        if abs(len(domain) - len(trusted_domain)) <= 2:
            if domain in trusted_domain or trusted_domain in domain:
                return True
        
        return False
    
    def check_domain_for_phishing(self, domain):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–º–µ–Ω –Ω–∞ —Ñ–∏—à–∏–Ω–≥"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã–µ –¥–æ–º–µ–Ω—ã
        if self.is_malicious_domain(domain):
            return "üö® –ò–∑–≤–µ—Å—Ç–Ω—ã–π –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã–π –¥–æ–º–µ–Ω!"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—É—é —Å—Ö–æ–∂–µ—Å—Ç—å —Å –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã–º–∏ –¥–æ–º–µ–Ω–∞–º–∏
        for trusted_domain in self.trusted_domains + self.bank_domains:
            if self.analyze_domain_similarity(domain, trusted_domain):
                return f"‚ö†Ô∏è –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ö–æ–∂–µ—Å—Ç—å —Å {trusted_domain}!"
        
        return None
    
    def get_page_info(self, url):
        """–ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ"""
        try:
            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
            }
            
            response = requests.get(url, headers=headers, timeout=15, allow_redirects=True)
            content = response.text.lower() if hasattr(response, 'text') else ''
                    
            return {
                'success': True,
                'final_url': response.url,
                'status_code': response.status_code,
                'content': content
            }
                
        except Exception as e:
            return {'success': False, 'error': str(e)}
    
    def analyze_content(self, content):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–∞ –ø—Ä–∏–∑–Ω–∞–∫–∏ —Ñ–∏—à–∏–Ω–≥–∞"""
        indicators = []
        
        if not content:
            return indicators
        
        phishing_indicators = [
            ('input your password', '–ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è'),
            ('verify your account', '–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏'),
            ('security alert', '–ü–æ–¥–¥–µ–ª—å–Ω–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏'),
            ('account suspension', '–£–≥—Ä–æ–∑–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞'),
            ('login to secure', '–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥–∞'),
            ('bank login', '–í—Ö–æ–¥ –≤ –±–∞–Ω–∫'),
            ('credit card number', '–ó–∞–ø—Ä–æ—Å –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã')
        ]
        
        for phrase, description in phishing_indicators:
            if phrase in content:
                indicators.append(description)
        
        return indicators
    
    def learn_from_feedback(self, domain, is_good):
        """–û–±—É—á–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
        domain_clean = self.get_domain_from_url(domain)
        
        if is_good:
            if domain_clean not in self.trusted_domains:
                self.trusted_domains.append(domain_clean)
                self.save_list(self.trusted_file, self.trusted_domains)
                print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –≤ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ: {domain_clean}")
        else:
            if domain_clean not in self.malicious_domains:
                self.malicious_domains.append(domain_clean)
                self.save_list(self.malicious_file, self.malicious_domains)
                print(f"üö® –î–æ–±–∞–≤–ª–µ–Ω –≤ –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã–µ: {domain_clean}")
    
    def analyze_link(self, original_url):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É"""
        print(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º: {original_url}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–∫–∏
        self.update_lists_from_feeds()
        
        domain = self.get_domain_from_url(original_url)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ –¥–æ–º–µ–Ω—ã
        if self.is_bank_domain(domain):
            phishing_warning = self.check_domain_for_phishing(domain)
            if phishing_warning:
                return f"üö® –í–ù–ò–ú–ê–ù–ò–ï! –ü–æ–¥–¥–µ–ª—å–Ω—ã–π –±–∞–Ω–∫–æ–≤—Å–∫–∏–π —Å–∞–π—Ç!\n{phishing_warning}\n‚ùå –ù–ï –≤–≤–æ–¥–∏—Ç–µ –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ!"
            else:
                return "‚úÖ –ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –¥–æ–º–µ–Ω\nüìé –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç –±–∞–Ω–∫–∞"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –¥–æ–º–µ–Ω—ã
        if self.is_trusted_domain(domain):
            phishing_warning = self.check_domain_for_phishing(domain)
            if phishing_warning:
                return f"‚ö†Ô∏è –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –¥–æ–º–µ–Ω!\n{phishing_warning}\nüîí –ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã!"
            else:
                return "‚úÖ –î–æ–≤–µ—Ä–µ–Ω–Ω—ã–π –¥–æ–º–µ–Ω\nüìé –°—Å—ã–ª–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–∞"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã–µ –¥–æ–º–µ–Ω—ã
        if self.is_malicious_domain(domain):
            return "üö® –ò–∑–≤–µ—Å—Ç–Ω—ã–π –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã–π –¥–æ–º–µ–Ω!\n‚ùå –ù–ï –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ!\nüîí –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –≤ –æ–ø–∞—Å–Ω–æ—Å—Ç–∏!"
        
        # –ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑
        page_info = self.get_page_info(original_url)
        if not page_info['success']:
            return f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {page_info['error']}"
        
        final_url = page_info['final_url']
        final_domain = self.get_domain_from_url(final_url)
        content = page_info['content']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –¥–æ–º–µ–Ω
        phishing_warning = self.check_domain_for_phishing(final_domain)
        content_indicators = self.analyze_content(content)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        message = "üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏:\n\n"
        message += f"üìé –°—Å—ã–ª–∫–∞: {original_url}\n"
        
        if original_url != final_url:
            message += f"üîó –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {final_url}\n"
        
        if phishing_warning:
            message += f"\nüö® {phishing_warning}\n"
        
        if content_indicators:
            message += f"\n‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(content_indicators)} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤:\n"
            for indicator in content_indicators[:3]:
                message += f"‚Ä¢ {indicator}\n"
        
        if phishing_warning or content_indicators:
            message += "\n‚ùå –í–æ–∑–º–æ–∂–µ–Ω —Ñ–∏—à–∏–Ω–≥!\n‚ö†Ô∏è –ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã!"
        else:
            message += "\n‚úÖ –ü—Ä–∏–∑–Ω–∞–∫–æ–≤ —Ñ–∏—à–∏–Ω–≥–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ\n"
            message += "üìù –°—Å—ã–ª–∫–∞ –≤—ã–≥–ª—è–¥–∏—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ\n"
        
        return message
    
    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞"""
        print("ü§ñ –£–ú–ù–´–ô –±–æ—Ç —Å –æ–±—É—á–µ–Ω–∏–µ–º –∑–∞–ø—É—â–µ–Ω...")
        print("üè¶ –†–∞—Å–ø–æ–∑–Ω–∞–µ—Ç –±–∞–Ω–∫–∏ –†–æ—Å—Å–∏–∏ –∏ –°–®–ê")
        print("üìö –û–±—É—á–∞–µ—Ç—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ feedback")
        print("üåê –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–≤")
        print("üì© –û–∂–∏–¥–∞—é —Å–æ–æ–±—â–µ–Ω–∏—è...")
        print("‚èπÔ∏è –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: Ctrl+C\n")
        
        last_update_id = None
        
        try:
            while True:
                updates = self.get_updates(last_update_id)
                
                if 'result' in updates:
                    for update in updates['result']:
                        if 'message' in update and 'text' in update['message']:
                            chat_id = update['message']['chat']['id']
                            text = update['message']['text']
                            username = update['message']['chat'].get('username', 'Unknown')
                            message_id = update['message']['message_id']
                            
                            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                            if last_update_id and update['update_id'] <= last_update_id:
                                continue
                            
                            print(f"üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{username}: {text}")
                            
                            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –æ–±—É—á–µ–Ω–∏—è
                            if text.startswith('/good '):
                                domain = text.split(' ', 1)[1]
                                self.learn_from_feedback(domain, True)
                                self.send_message(chat_id, f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ: {domain}")
                                last_update_id = update['update_id']
                                continue
                            
                            if text.startswith('/bad '):
                                domain = text.split(' ', 1)[1]
                                self.learn_from_feedback(domain, False)
                                self.send_message(chat_id, f"üö® –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã–µ: {domain}")
                                last_update_id = update['update_id']
                                continue
                            
                            if text == '/start':
                                welcome = """üëã –ü—Ä–∏–≤–µ—Ç! –Ø —É–º–Ω—ã–π –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Å—ã–ª–æ–∫!

üè¶ –†–∞—Å–ø–æ–∑–Ω–∞—é –±–∞–Ω–∫–∏ –†–æ—Å—Å–∏–∏ –∏ –°–®–ê
üîç –û–±–Ω–∞—Ä—É–∂–∏–≤–∞—é —Ñ–∏—à–∏–Ω–≥ –∏ –ø–æ–¥–¥–µ–ª—å–Ω—ã–µ —Å–∞–π—Ç—ã
üìö –û–±—É—á–∞—é—Å—å –Ω–∞ –≤–∞—à–∏—Ö –æ—Ç—á–µ—Ç–∞—Ö

üìé –ü—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ —Å—Å—ã–ª–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏

üìù –î–ª—è –æ–±—É—á–µ–Ω–∏—è:
/good —Å—Å—ã–ª–∫–∞ - –¥–æ–±–∞–≤–∏—Ç—å –≤ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ
/bad —Å—Å—ã–ª–∫–∞ - –¥–æ–±–∞–≤–∏—Ç—å –≤ –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã–µ"""
                                self.send_message(chat_id, welcome)
                                last_update_id = update['update_id']
                                continue
                            
                            # –ü–æ–∏—Å–∫ —Å—Å—ã–ª–æ–∫
                            links = self.extract_links(text)
                            
                            if links:
                                for link in links:
                                    print(f"üîó –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º: {link}")
                                    self.send_message(chat_id, "üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å—Å—ã–ª–∫—É...")
                                    result = self.analyze_link(link)
                                    self.send_message(chat_id, result)
                            else:
                                if text.strip() and not text.startswith('/'):
                                    self.send_message(chat_id, "üìù –ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
                            
                            last_update_id = update['update_id']
                
                time.sleep(1)
                
        except KeyboardInterrupt:
            print("\nüõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    if BOT_TOKEN == "–í–ê–®_–¢–û–ö–ï–ù_–ë–û–¢–ê_–ó–î–ï–°–¨":
        print("‚ùå –û–®–ò–ë–ö–ê: –ó–∞–º–µ–Ω–∏—Ç–µ BOT_TOKEN –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω!")
        print("üìù –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω —É @BotFather")
    else:
        bot = SmartPhishingCheckerBot(BOT_TOKEN)
        bot.run()
